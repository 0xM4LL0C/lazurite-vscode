{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "lazurite",
    "scopeName": "source.lazurite",
    "patterns": [
        { "include": "#comments" },
        { "include": "#keywords" },
        { "include": "#classes" },
        { "include": "#functions" },
        { "include": "#operators" },
        { "include": "#constants" },
        { "include": "#strings" },
        { "include": "#variables" },
        { "include": "#loops" },
        { "include": "#conditions" },
        { "include": "#switch" },
        { "include": "#preprocessor" }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.lazurite",
                    "match": "\\b(func|if|else|while|for|match|return|case|default|and|or|using|new|class|try|catch|throw|macro|enum|break|continue|assert|do)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.lazurite",
                    "match": "[-+*/=<>`&\\|!%~:\\^\\.,\\{\\}\\[\\]\\(\\)]"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.numeric.lazurite",
                    "match": "\\b[0-9](_?[0-9])*[bldfiz]?\\b"
                },
                {
                    "name": "constant.language",
                    "match": "\\b(?:true|false|this)\\b"
                },
                {
                    "name": "constant.other.uppercase.lazurite",
                    "match": "\\b[A-Z_][A-Z0-9_]*\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted",
                    "begin": "(\"|\\')",
                    "end": "(\"|\\')",
                    "patterns": [
                        {
                            "name": "constant.character.escape.lazurite",
                            "match": "\\\\."
                        },
                        {
                            "name": "constant.character.interpolation.lazurite",
                            "begin": "\\$\\{",
                            "end": "\\}",
                            "patterns": [
                                { "include": "#functions" },
                                { "include": "#constants" },
                                { "include": "#operators" },
                                { "include": "#variables" }
                            ]
                        },
                        {
                            "name": "constant.character.interpolation.simple.lazurite",
                            "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
                        }
                    ]
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.parameter.lazurite",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.lazurite",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.lazurite",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [ { "include": "#comments" } ]
                }
            ]
        },
        "loops": {
            "patterns": [
                {
                    "name": "meta.loop.lazurite",
                    "begin": "\\b(while|for|do)\\b",
                    "end": "{",
                    "patterns": [ { "include": "#variables" } ]
                }
            ]
        },
        "conditions": {
            "patterns": [
                {
                    "name": "meta.condition.if.lazurite",
                    "begin": "\\b(if|else if|else)\\b",
                    "end": "{",
                    "patterns": [ { "include": "#variables" } ]
                }
            ]
        },
        "switch": {
            "patterns": [
                {
                    "name": "meta.switch.lazurite",
                    "begin": "\\bmatch\\b",
                    "end": "{",
                    "patterns": [ { "include": "#variables" } ]
                }
            ]
        },
        "case": {
            "patterns": [
                {
                    "name": "meta.case.lazurite",
                    "begin": "\\bcase\\b",
                    "end": "{",
                    "patterns": [ { "include": "#variables" } ]
                }
            ]
        },
        "preprocessor": {
            "patterns": [
                {
                    "name": "keyword.preprocessor.include.lazurite",
                    "match": "^\\s*#include\\b"
                },
                {
                    "name": "keyword.preprocessor.define.lazurite",
                    "match": "^\\s*#define\\b"
                },
                {
                    "name": "keyword.preprocessor.jinclude.lazurite",
                    "match": "^\\s*#jInclude\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.lazurite",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b\\s*(?=\\()"
                }
            ]
        },
        "classes": {
            "patterns": [
                {
                    "name": "entity.name.type.lazurite",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b\\s*(?=\\{)"
                }
            ]
        }
    }
}
